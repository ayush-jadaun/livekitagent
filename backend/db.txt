-- Create ENUM types first
CREATE TYPE onboarding_status AS ENUM ('Done', 'Pending');
CREATE TYPE room_condition AS ENUM ('on', 'off');

-- Create users table (extends Supabase auth)
CREATE TABLE users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    age INTEGER,
    onboarding onboarding_status DEFAULT 'Pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create room table (one room per user forever)
CREATE TABLE room (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    room_name TEXT NOT NULL UNIQUE, -- This will be used as LiveKit room identifier
    room_condition room_condition DEFAULT 'off',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create sessions table
CREATE TABLE sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    room_id UUID NOT NULL REFERENCES room(id) ON DELETE CASCADE,
    started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    finished_at TIMESTAMP WITH TIME ZONE NULL
);

-- Create summary table
CREATE TABLE summary (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    room_id UUID NOT NULL REFERENCES room(id) ON DELETE CASCADE,
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    summary_text TEXT,
    dominant_emotion TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_users_id ON users(id);
CREATE INDEX idx_room_user_id ON room(user_id);
CREATE INDEX idx_room_condition ON room(room_condition);
CREATE INDEX idx_sessions_user_id ON sessions(user_id);
CREATE INDEX idx_sessions_room_id ON sessions(room_id);
CREATE INDEX idx_summary_user_id ON summary(user_id);
CREATE INDEX idx_summary_session_id ON summary(session_id);

-- Create unique constraint to ensure one room per user
CREATE UNIQUE INDEX idx_room_user_unique ON room(user_id);

-- Create trigger to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply the trigger to tables that need it
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_room_updated_at 
    BEFORE UPDATE ON room 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to create a room for a new user
CREATE OR REPLACE FUNCTION create_user_room()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO room (user_id, room_name)
    VALUES (NEW.id, 'room_' || NEW.id);
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically create a room when a new user is created
CREATE TRIGGER create_room_for_new_user
    AFTER INSERT ON users
    FOR EACH ROW EXECUTE FUNCTION create_user_room();

-- Function to handle room condition changes and webhook notifications
CREATE OR REPLACE FUNCTION handle_room_condition_change()
RETURNS TRIGGER AS $$
BEGIN
    -- This function can be extended to send webhook notifications
    -- For now, it just logs the change
    IF NEW.room_condition = 'on' AND OLD.room_condition = 'off' THEN
        -- Room turned on - webhook should be triggered from application layer
        RAISE NOTICE 'Room % turned ON for user %', NEW.room_name, NEW.user_id;
    ELSIF NEW.room_condition = 'off' AND OLD.room_condition = 'on' THEN
        -- Room turned off
        RAISE NOTICE 'Room % turned OFF for user %', NEW.room_name, NEW.user_id;
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger for room condition changes
CREATE TRIGGER room_condition_change_trigger
    AFTER UPDATE OF room_condition ON room
    FOR EACH ROW EXECUTE FUNCTION handle_room_condition_change();

-- Enable Row Level Security (RLS) for Supabase
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE room ENABLE ROW LEVEL SECURITY;
ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE summary ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users can only see/modify their own data
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can view own room" ON room
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update own room" ON room
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can view own sessions" ON sessions
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own sessions" ON sessions
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own sessions" ON sessions
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can view own summaries" ON summary
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own summaries" ON summary
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Example queries for common operations:

-- 1. Get user's room information
-- SELECT r.*, u.name as user_name 
-- FROM room r 
-- JOIN users u ON r.user_id = u.id 
-- WHERE u.id = 'user_uuid_here';

-- 2. Start a new session (turn room on)
-- INSERT INTO sessions (user_id, room_id) 
-- VALUES ('user_uuid', 'room_uuid');
-- 
-- UPDATE room 
-- SET room_condition = 'on' 
-- WHERE user_id = 'user_uuid';

-- 3. End a session (turn room off)
-- UPDATE sessions 
-- SET finished_at = NOW() 
-- WHERE id = 'session_uuid';
-- 
-- UPDATE room 
-- SET room_condition = 'off' 
-- WHERE user_id = 'user_uuid';

-- 4. Get active sessions
-- SELECT s.*, r.room_name, u.name as user_name
-- FROM sessions s
-- JOIN room r ON s.room_id = r.id
-- JOIN users u ON s.user_id = u.id
-- WHERE s.finished_at IS NULL;

-- 5. Get rooms that are currently 'on'
-- SELECT r.*, u.name as user_name
-- FROM room r
-- JOIN users u ON r.user_id = u.id
-- WHERE r.room_condition = 'on';







-- ENUM for payment status
CREATE TYPE payment_status AS ENUM ('active', 'cancelled', 'failed', 'paused');

-- payment plans (optional, if you plan tiers like Starter, Pro, Enterprise)
CREATE TABLE plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT UNIQUE NOT NULL,
    monthly_price INTEGER NOT NULL, -- in paise
    monthly_limit INTEGER NOT NULL, -- e.g., 2.5 million sessions
    created_at TIMESTAMP DEFAULT NOW()
);

-- payments table
CREATE TABLE payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    plan_id UUID REFERENCES plans(id),
    razorpay_customer_id TEXT NOT NULL,
    razorpay_subscription_id TEXT NOT NULL,
    status payment_status NOT NULL,
    session_limit BIGINT NOT NULL DEFAULT 2500000,
    session_used BIGINT NOT NULL DEFAULT 0,
    start_at TIMESTAMP NOT NULL,
    end_at TIMESTAMP,
    next_billing_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Indexes
CREATE INDEX idx_payments_user_id ON payments(user_id);

ALTER TABLE payments ADD COLUMN IF NOT EXISTS last_reset_at TIMESTAMP;
ALTER TABLE payments ADD COLUMN IF NOT EXISTS last_payment_amount INTEGER;
ALTER TABLE payments ADD COLUMN IF NOT EXISTS last_payment_at TIMESTAMP;
ALTER TABLE payments ADD COLUMN IF NOT EXISTS grace_period_ends_at TIMESTAMP;


CREATE INDEX IF NOT EXISTS idx_payments_user_status ON payments(user_id, status);
CREATE INDEX IF NOT EXISTS idx_payments_subscription_id ON payments(razorpay_subscription_id);

ALTER TABLE users
ADD COLUMN trial_seconds_used INTEGER NOT NULL DEFAULT 0;

ALTER TYPE payment_status ADD VALUE 'past_due';